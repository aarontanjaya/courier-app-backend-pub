// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "courier-app/dto"
	entity "courier-app/entity"

	mock "github.com/stretchr/testify/mock"
)

// PromoRepository is an autogenerated mock type for the PromoRepository type
type PromoRepository struct {
	mock.Mock
}

// CreatePromo provides a mock function with given fields: promo
func (_m *PromoRepository) CreatePromo(promo *entity.Promo) (*entity.Promo, error) {
	ret := _m.Called(promo)

	var r0 *entity.Promo
	if rf, ok := ret.Get(0).(func(*entity.Promo) *entity.Promo); ok {
		r0 = rf(promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Promo) error); ok {
		r1 = rf(promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllActiveUserVouchers provides a mock function with given fields: userId
func (_m *PromoRepository) GetAllActiveUserVouchers(userId uint) (*[]entity.UserVoucher, error) {
	ret := _m.Called(userId)

	var r0 *[]entity.UserVoucher
	if rf, ok := ret.Get(0).(func(uint) *[]entity.UserVoucher); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.UserVoucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPromo provides a mock function with given fields: p
func (_m *PromoRepository) GetAllPromo(p *dto.PaginationSortRequest) (*[]entity.Promo, error) {
	ret := _m.Called(p)

	var r0 *[]entity.Promo
	if rf, ok := ret.Get(0).(func(*dto.PaginationSortRequest) *[]entity.Promo); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PaginationSortRequest) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountAllPromo provides a mock function with given fields: p
func (_m *PromoRepository) GetCountAllPromo(p *dto.PaginationSortRequest) (int64, error) {
	ret := _m.Called(p)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*dto.PaginationSortRequest) int64); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PaginationSortRequest) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromoById provides a mock function with given fields: promoId
func (_m *PromoRepository) GetPromoById(promoId uint) (*entity.Promo, error) {
	ret := _m.Called(promoId)

	var r0 *entity.Promo
	if rf, ok := ret.Get(0).(func(uint) *entity.Promo); ok {
		r0 = rf(promoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(promoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomActivePromo provides a mock function with given fields:
func (_m *PromoRepository) GetRandomActivePromo() (*entity.Promo, error) {
	ret := _m.Called()

	var r0 *entity.Promo
	if rf, ok := ret.Get(0).(func() *entity.Promo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherById provides a mock function with given fields: voucherId
func (_m *PromoRepository) GetVoucherById(voucherId uint) (*entity.UserVoucher, error) {
	ret := _m.Called(voucherId)

	var r0 *entity.UserVoucher
	if rf, ok := ret.Get(0).(func(uint) *entity.UserVoucher); ok {
		r0 = rf(voucherId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserVoucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(voucherId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueVoucher provides a mock function with given fields: userId, promoId
func (_m *PromoRepository) IssueVoucher(userId uint, promoId uint) (*entity.UserVoucher, error) {
	ret := _m.Called(userId, promoId)

	var r0 *entity.UserVoucher
	if rf, ok := ret.Get(0).(func(uint, uint) *entity.UserVoucher); ok {
		r0 = rf(userId, promoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserVoucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userId, promoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromo provides a mock function with given fields: promo
func (_m *PromoRepository) UpdatePromo(promo *entity.Promo) error {
	ret := _m.Called(promo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Promo) error); ok {
		r0 = rf(promo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseVoucher provides a mock function with given fields: id
func (_m *PromoRepository) UseVoucher(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPromoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPromoRepository creates a new instance of PromoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPromoRepository(t mockConstructorTestingTNewPromoRepository) *PromoRepository {
	mock := &PromoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
