// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "courier-app/dto"
	entity "courier-app/entity"

	mock "github.com/stretchr/testify/mock"
)

// ShippingRepository is an autogenerated mock type for the ShippingRepository type
type ShippingRepository struct {
	mock.Mock
}

// CreateShipping provides a mock function with given fields: _a0
func (_m *ShippingRepository) CreateShipping(_a0 *entity.Shipping) (*entity.Shipping, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Shipping
	if rf, ok := ret.Get(0).(func(*entity.Shipping) *entity.Shipping); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Shipping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Shipping) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: paging
func (_m *ShippingRepository) GetAll(paging *dto.ShippingTableRequest) (*[]entity.Shipping, error) {
	ret := _m.Called(paging)

	var r0 *[]entity.Shipping
	if rf, ok := ret.Get(0).(func(*dto.ShippingTableRequest) *[]entity.Shipping); ok {
		r0 = rf(paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Shipping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.ShippingTableRequest) error); ok {
		r1 = rf(paging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *ShippingRepository) GetById(id uint) (*entity.Shipping, error) {
	ret := _m.Called(id)

	var r0 *entity.Shipping
	if rf, ok := ret.Get(0).(func(uint) *entity.Shipping); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Shipping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: userId, paging
func (_m *ShippingRepository) GetByUserId(userId uint, paging *dto.ShippingTableRequest) (*[]entity.Shipping, error) {
	ret := _m.Called(userId, paging)

	var r0 *[]entity.Shipping
	if rf, ok := ret.Get(0).(func(uint, *dto.ShippingTableRequest) *[]entity.Shipping); ok {
		r0 = rf(userId, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Shipping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.ShippingTableRequest) error); ok {
		r1 = rf(userId, paging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountAll provides a mock function with given fields: paging
func (_m *ShippingRepository) GetCountAll(paging *dto.ShippingTableRequest) (int64, error) {
	ret := _m.Called(paging)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*dto.ShippingTableRequest) int64); ok {
		r0 = rf(paging)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.ShippingTableRequest) error); ok {
		r1 = rf(paging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountByUserId provides a mock function with given fields: userId, paging
func (_m *ShippingRepository) GetCountByUserId(userId uint, paging *dto.ShippingTableRequest) (int64, error) {
	ret := _m.Called(userId, paging)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint, *dto.ShippingTableRequest) int64); ok {
		r0 = rf(userId, paging)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.ShippingTableRequest) error); ok {
		r1 = rf(userId, paging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShippingStatusById provides a mock function with given fields: statusId
func (_m *ShippingRepository) GetShippingStatusById(statusId uint) (*entity.ShippingStatus, error) {
	ret := _m.Called(statusId)

	var r0 *entity.ShippingStatus
	if rf, ok := ret.Get(0).(func(uint) *entity.ShippingStatus); ok {
		r0 = rf(statusId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ShippingStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(statusId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShippingStatuses provides a mock function with given fields:
func (_m *ShippingRepository) GetShippingStatuses() (*[]entity.ShippingStatus, error) {
	ret := _m.Called()

	var r0 *[]entity.ShippingStatus
	if rf, ok := ret.Get(0).(func() *[]entity.ShippingStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.ShippingStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Review provides a mock function with given fields: req
func (_m *ShippingRepository) Review(req *dto.ShippingReviewRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.ShippingReviewRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: shippingId, statusId
func (_m *ShippingRepository) UpdateStatus(shippingId uint, statusId uint) error {
	ret := _m.Called(shippingId, statusId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(shippingId, statusId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewShippingRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewShippingRepository creates a new instance of ShippingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShippingRepository(t mockConstructorTestingTNewShippingRepository) *ShippingRepository {
	mock := &ShippingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
