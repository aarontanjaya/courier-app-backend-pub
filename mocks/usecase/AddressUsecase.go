// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "courier-app/dto"
	entity "courier-app/entity"

	mock "github.com/stretchr/testify/mock"
)

// AddressUsecase is an autogenerated mock type for the AddressUsecase type
type AddressUsecase struct {
	mock.Mock
}

// CreateAddress provides a mock function with given fields: userId, address
func (_m *AddressUsecase) CreateAddress(userId uint, address *dto.AddressCreateRequest) (*entity.Address, error) {
	ret := _m.Called(userId, address)

	var r0 *entity.Address
	if rf, ok := ret.Get(0).(func(uint, *dto.AddressCreateRequest) *entity.Address); ok {
		r0 = rf(userId, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.AddressCreateRequest) error); ok {
		r1 = rf(userId, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAddress provides a mock function with given fields: recordId, userId
func (_m *AddressUsecase) DeleteAddress(recordId uint, userId uint) (*entity.Address, error) {
	ret := _m.Called(recordId, userId)

	var r0 *entity.Address
	if rf, ok := ret.Get(0).(func(uint, uint) *entity.Address); ok {
		r0 = rf(recordId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(recordId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: paging
func (_m *AddressUsecase) GetAll(paging *dto.AddressPaginationRequest) (*[]entity.Address, *dto.Pagination, error) {
	ret := _m.Called(paging)

	var r0 *[]entity.Address
	if rf, ok := ret.Get(0).(func(*dto.AddressPaginationRequest) *[]entity.Address); ok {
		r0 = rf(paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Address)
		}
	}

	var r1 *dto.Pagination
	if rf, ok := ret.Get(1).(func(*dto.AddressPaginationRequest) *dto.Pagination); ok {
		r1 = rf(paging)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.Pagination)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*dto.AddressPaginationRequest) error); ok {
		r2 = rf(paging)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: id
func (_m *AddressUsecase) GetById(id uint) (*entity.Address, error) {
	ret := _m.Called(id)

	var r0 *entity.Address
	if rf, ok := ret.Get(0).(func(uint) *entity.Address); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddress provides a mock function with given fields: userId, address
func (_m *AddressUsecase) UpdateAddress(userId uint, address *dto.AddressUpdateRequest) error {
	ret := _m.Called(userId, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *dto.AddressUpdateRequest) error); ok {
		r0 = rf(userId, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAddressUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressUsecase creates a new instance of AddressUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressUsecase(t mockConstructorTestingTNewAddressUsecase) *AddressUsecase {
	mock := &AddressUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
