// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "courier-app/entity"

	mock "github.com/stretchr/testify/mock"
)

// AddOnUsecase is an autogenerated mock type for the AddOnUsecase type
type AddOnUsecase struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *AddOnUsecase) GetAll() (*[]entity.AddOn, error) {
	ret := _m.Called()

	var r0 *[]entity.AddOn
	if rf, ok := ret.Get(0).(func() *[]entity.AddOn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.AddOn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *AddOnUsecase) GetById(id uint) (*entity.AddOn, error) {
	ret := _m.Called(id)

	var r0 *entity.AddOn
	if rf, ok := ret.Get(0).(func(uint) *entity.AddOn); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AddOn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIds provides a mock function with given fields: ids
func (_m *AddOnUsecase) GetByIds(ids []uint) (*[]entity.AddOn, error) {
	ret := _m.Called(ids)

	var r0 *[]entity.AddOn
	if rf, ok := ret.Get(0).(func([]uint) *[]entity.AddOn); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.AddOn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddOnUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddOnUsecase creates a new instance of AddOnUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddOnUsecase(t mockConstructorTestingTNewAddOnUsecase) *AddOnUsecase {
	mock := &AddOnUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
