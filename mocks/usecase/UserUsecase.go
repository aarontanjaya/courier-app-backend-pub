// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "courier-app/dto"
	entity "courier-app/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// ChangeGachaQuota provides a mock function with given fields: userId, amount
func (_m *UserUsecase) ChangeGachaQuota(userId uint, amount int) error {
	ret := _m.Called(userId, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int) error); ok {
		r0 = rf(userId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserUsecase) GetByEmail(email string) (*dto.UserResponse, error) {
	ret := _m.Called(email)

	var r0 *dto.UserResponse
	if rf, ok := ret.Get(0).(func(string) *dto.UserResponse); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UserUsecase) GetById(id uint) (*dto.UserResponse, error) {
	ret := _m.Called(id)

	var r0 *dto.UserResponse
	if rf, ok := ret.Get(0).(func(uint) *dto.UserResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByReferral provides a mock function with given fields: referral
func (_m *UserUsecase) GetByReferral(referral string) (*dto.UserResponse, error) {
	ret := _m.Called(referral)

	var r0 *dto.UserResponse
	if rf, ok := ret.Get(0).(func(string) *dto.UserResponse); ok {
		r0 = rf(referral)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(referral)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailsById provides a mock function with given fields: id
func (_m *UserUsecase) GetDetailsById(id uint) (*entity.UserDetail, error) {
	ret := _m.Called(id)

	var r0 *entity.UserDetail
	if rf, ok := ret.Get(0).(func(uint) *entity.UserDetail); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBalance provides a mock function with given fields: id
func (_m *UserUsecase) GetUserBalance(id uint) (*dto.UserBalanceResponse, error) {
	ret := _m.Called(id)

	var r0 *dto.UserBalanceResponse
	if rf, ok := ret.Get(0).(func(uint) *dto.UserBalanceResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserBalanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGachaQuota provides a mock function with given fields: id
func (_m *UserUsecase) GetUserGachaQuota(id uint) (*dto.UserGachaQuotaResponse, error) {
	ret := _m.Called(id)

	var r0 *dto.UserGachaQuotaResponse
	if rf, ok := ret.Get(0).(func(uint) *dto.UserGachaQuotaResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserGachaQuotaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleReferral provides a mock function with given fields: user
func (_m *UserUsecase) HandleReferral(user *entity.UserDetail) (*[]entity.Transaction, error) {
	ret := _m.Called(user)

	var r0 *[]entity.Transaction
	if rf, ok := ret.Get(0).(func(*entity.UserDetail) *[]entity.Transaction); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.UserDetail) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *UserUsecase) Register(_a0 *entity.User) (*dto.RegisterResponse, error) {
	ret := _m.Called(_a0)

	var r0 *dto.RegisterResponse
	if rf, ok := ret.Get(0).(func(*entity.User) *dto.RegisterResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: user, id
func (_m *UserUsecase) UpdateProfile(user *dto.UpdateProfileRequest, id uint) error {
	ret := _m.Called(user, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.UpdateProfileRequest, uint) error); ok {
		r0 = rf(user, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
