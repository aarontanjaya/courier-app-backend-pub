// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "courier-app/dto"
	entity "courier-app/entity"

	mock "github.com/stretchr/testify/mock"
)

// PromoUsecase is an autogenerated mock type for the PromoUsecase type
type PromoUsecase struct {
	mock.Mock
}

// CreatePromo provides a mock function with given fields: promo
func (_m *PromoUsecase) CreatePromo(promo *dto.PromoRequest) (*entity.Promo, error) {
	ret := _m.Called(promo)

	var r0 *entity.Promo
	if rf, ok := ret.Get(0).(func(*dto.PromoRequest) *entity.Promo); ok {
		r0 = rf(promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PromoRequest) error); ok {
		r1 = rf(promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllActiveUserVouchers provides a mock function with given fields: userId
func (_m *PromoUsecase) GetAllActiveUserVouchers(userId uint) (*[]entity.UserVoucher, error) {
	ret := _m.Called(userId)

	var r0 *[]entity.UserVoucher
	if rf, ok := ret.Get(0).(func(uint) *[]entity.UserVoucher); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.UserVoucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPromo provides a mock function with given fields: _a0
func (_m *PromoUsecase) GetAllPromo(_a0 *dto.PaginationSortRequest) (*[]entity.Promo, *dto.Pagination, error) {
	ret := _m.Called(_a0)

	var r0 *[]entity.Promo
	if rf, ok := ret.Get(0).(func(*dto.PaginationSortRequest) *[]entity.Promo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Promo)
		}
	}

	var r1 *dto.Pagination
	if rf, ok := ret.Get(1).(func(*dto.PaginationSortRequest) *dto.Pagination); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.Pagination)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*dto.PaginationSortRequest) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVoucherById provides a mock function with given fields: voucherId
func (_m *PromoUsecase) GetVoucherById(voucherId uint) (*entity.UserVoucher, error) {
	ret := _m.Called(voucherId)

	var r0 *entity.UserVoucher
	if rf, ok := ret.Get(0).(func(uint) *entity.UserVoucher); ok {
		r0 = rf(voucherId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserVoucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(voucherId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueGachaVoucher provides a mock function with given fields: userId
func (_m *PromoUsecase) IssueGachaVoucher(userId uint) (*entity.Promo, error) {
	ret := _m.Called(userId)

	var r0 *entity.Promo
	if rf, ok := ret.Get(0).(func(uint) *entity.Promo); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromo provides a mock function with given fields: promoId, p
func (_m *PromoUsecase) UpdatePromo(promoId uint, p *dto.PromoRequest) error {
	ret := _m.Called(promoId, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *dto.PromoRequest) error); ok {
		r0 = rf(promoId, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPromoUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPromoUsecase creates a new instance of PromoUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPromoUsecase(t mockConstructorTestingTNewPromoUsecase) *PromoUsecase {
	mock := &PromoUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
